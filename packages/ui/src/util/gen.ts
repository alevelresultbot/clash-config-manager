import { ClashConfig, RuleItem, Subscribe } from '$ui/common/define'
import { ProxyGroupType } from '$ui/common/define/ClashConfig'
import { pmap, YAML } from '$ui/libs'
import { rootActions, rootState } from '$ui/store'
import fse from 'fs-extra'
import { homedir } from 'os'
import { join as pathjoin } from 'path'

export function getUsingItems() {
  // subscribe
  const subscribeList = rootState.librarySubscribe.list

  // rule
  const ruleList = rootState.libraryRuleList.list

  // 只放 {type, id}
  const { list: resultList } = rootState.currentConfig

  // 具体 item
  const resultItemList = resultList
    .filter((x) => !x.disabled) // remove toggle off item
    .map(({ type, id }) => {
      if (type === 'subscribe') {
        const item = subscribeList.find((x) => x.id === id)
        if (item) {
          return { item, type }
        }
      }
      if (type === 'rule') {
        const item = ruleList.find((x) => x.id === id)
        if (item) {
          return { item, type }
        }
      }
    })
    .filter(Boolean)

  const subscribeItems = resultItemList
    .filter((x) => x?.type === 'subscribe')
    .map((x) => x?.item) as Subscribe[]

  const ruleItems = resultItemList
    .filter((x) => x?.type === 'rule')
    .map((x) => x?.item) as RuleItem[]

  return { subscribeItems, ruleItems }
}

export default async function genConfig({ forceUpdate = false }: { forceUpdate?: boolean } = {}) {
  const { name } = rootState.currentConfig
  const { subscribeItems, ruleItems } = getUsingItems()

  /**
   * config merge
   */
  let config: Partial<ClashConfig> = {}
  const updateConfig = (partial: Partial<ClashConfig>) => {
    const { rules, ...otherConfig } = partial
    // reverse: GUI最前面的优先
    config = { ...otherConfig, ...config, rules: [...(config.rules || []), ...(rules || [])] }
  }

  // 批量更新远程规则
  const remoteRuleItems = ruleItems.filter(
    (item) => item.type === 'remote' || item.type === 'remote-rule-provider'
  )
  await pmap(
    remoteRuleItems,
    async (item) => {
      await rootActions.libraryRuleList.updateRemote({ item, forceUpdate })
    },
    5
  )

  for (const item of ruleItems) {
    const { type } = item

    if (type === 'local') {
      const partial = YAML.load(item.content) as Partial<ClashConfig>
      updateConfig(partial)
      continue
    }

    if (type === 'remote') {
      const content = item.content!
      const partial = YAML.load(content) as Partial<ClashConfig>
      updateConfig(partial)
      continue
    }

    if (type === 'remote-rule-provider') {
      const { payload = [], providerBehavior, providerPolicy } = item

      let rules: string[]
      if (providerBehavior === 'classical') {
        rules = payload.map((s) => `${s},${providerPolicy}`)
      } else if (providerBehavior === 'domain') {
        rules = payload.map((s) => `DOMAIN,${s},${providerPolicy}`)
      } else {
        rules = payload.map((s) => {
          if (s.includes(':')) {
            return `IP-CIDR6,${s},${providerPolicy}`
          } else {
            return `IP-CIDR,${s},${providerPolicy}`
          }
        })
      }

      updateConfig({ rules })
      continue
    }
  }

  /**
   * subscribe
   */

  if (!Array.isArray(config.proxies)) config.proxies = []
  if (!Array.isArray(config['proxy-groups'])) config['proxy-groups'] = []

  // batch update subscribe
  await pmap(
    subscribeItems,
    (item) =>
      rootActions.librarySubscribe.update({
        url: item.url,
        silent: true,
        forceUpdate,
      }),
    5
  )

  for (const item of subscribeItems) {
    const { url } = item
    let servers = rootState.librarySubscribe.detail[url] || []
    config.proxies = config.proxies.concat(servers)
  }

  /**
   * proxy group
   */

  // subscribe 自动生成 proxy groups
  const subscribeTragets = subscribeItems.map((sub) => sub.name)

  const genGroupsFor = (label: string, proxies: string[]) => {
    const withSuffix = [
      {
        name: `${label}-最快`,
        type: ProxyGroupType.URLTest,
        proxies,
        url: 'http://www.gstatic.com/generate_204',
        interval: 150,
      },
      {
        name: `${label}-可用`,
        type: ProxyGroupType.Fallback,
        proxies,
        url: 'http://www.gstatic.com/generate_204',
        interval: 150,
      },
      {
        name: `${label}-手选`,
        type: ProxyGroupType.Select,
        proxies,
      },
    ]

    return [
      {
        name: label,
        type: ProxyGroupType.Select,
        proxies: withSuffix.map((pg) => pg.name),
      },
      ...withSuffix,
    ]
  }

  const autoGeneratedProxyGroupsForSubscribe = [
    ...genGroupsFor(
      'ALL',
      config.proxies.map((p) => p.name)
    ),
    ...subscribeTragets
      .map((subscribeName, index) => {
        const url = subscribeItems[index].url
        const subscribeProxies = (rootState.librarySubscribe.detail[url] || []).map(
          (server) => server.name
        )
        return genGroupsFor(subscribeName, subscribeProxies)
      })
      .flat(),
  ]

  const defaultProxiesForProxyGroup = [
    'DIRECT',
    'Proxy',
    ...autoGeneratedProxyGroupsForSubscribe.map((proxyGroup) => proxyGroup.name),
    'REJECT',
  ]

  const prependProxyGroups = [
    {
      name: 'Proxy',
      type: ProxyGroupType.Select,
      proxies: autoGeneratedProxyGroupsForSubscribe.map((proxyGroup) => proxyGroup.name),
    },
    ...autoGeneratedProxyGroupsForSubscribe,
  ]
  const prependProxyGroupsNames = prependProxyGroups.map((pg) => pg.name)

  // yaml 中已定义 Proxy 的
  let proxyGroups = config['proxy-groups']
  proxyGroups = proxyGroups.filter((pg) => {
    if (prependProxyGroupsNames.includes(pg.name)) {
      // if (pg.proxies?.length) {
      //   const prependProxyGroup = prependProxyGroups.find(
      //     (prependProxyGroup) => prependProxyGroup.name === pg.name
      //   )
      //   if (prependProxyGroup) prependProxyGroup.proxies = pg.proxies
      // }
      return false
    } else {
      return true
    }
  })

  // yaml 中写的 proxy-groups
  // 如果没有写 proxies, 则指定为 [DIRECT, Proxy, ...subscribe, REJECT]
  proxyGroups
    .filter((item) => !item.proxies || !Array.isArray(item.proxies) || !item.proxies.length)
    .forEach((item) => {
      item.proxies = defaultProxiesForProxyGroup
    })

  proxyGroups = [...prependProxyGroups, ...proxyGroups]

  const existingProxyGroupNames = proxyGroups.map((item) => item.name)
  const reservedTargets = ['DIRECT', 'REJECT', 'no-resolve']
  const toAddGroups = new Set<string>()

  for (const line of config.rules || []) {
    const use = line.split(',').slice(-1)[0]
    if (!use) continue
    if (reservedTargets.includes(use)) continue
    if (existingProxyGroupNames.includes(use)) continue
    toAddGroups.add(use)
  }

  for (const target of toAddGroups) {
    const newgroup = {
      name: target,
      type: ProxyGroupType.Select,
      proxies: defaultProxiesForProxyGroup,
    }
    proxyGroups.push(newgroup)
  }

  // done for proxy-groups
  config['proxy-groups'] = proxyGroups

  // final rules
  // 未匹配使用 DIRECT
  if (!config.rules?.at(-1)?.startsWith('MATCH,')) {
    config.rules?.push('MATCH,DIRECT')
  }

  const configYaml = YAML.dump(config)
  const file = getConfigFile(name)
  await fse.outputFile(file, configYaml)

  console.log(configYaml)
  console.log('[done]: %s writed', file)
  return {
    success: true,
    filename: file,
    msg: `${file} writed`,
  }
}

export const DEFAULT_NAME = 'clash-config-manager'

// default parameter 不能处理空字符串的情况

export function getConfigFile(name?: string) {
  name = name || DEFAULT_NAME
  return pathjoin(homedir(), `.config/clash/${name}.yaml`)
}

export function getConfigFileDisplay(name?: string) {
  name = name || DEFAULT_NAME
  return `~/.config/clash/${name}.yaml`
}
